
""" radiative.py

    Routines for calculating quantities useful for
    radiative transfer, such as Einstein coefficients
"""
import numpy as np
import pandas as pd
from scipy import constants
from .units import kbcm, MHz2cm


def parse_str(filepath):
    # Function that will parse a .str file from SPCAT
    # This file can be generated by supplying 0020 as
    # the first flag in the `.int` file.
    # Returns a Pandas dataframe
    names = [
        "Frequency",
        "RTDM",
        "Formatting",
        "Upper QN",
        "Lower QN",
        "Dipole Category"
        ]
    # Use fixed-width reading in pandas
    str_df = pd.read_fwf(
        filepath,
        widths=[15, 15, 5, 12, 12, 11],
        names=names,
        index=False
    )
    return str_df


def I2S(I, Q, frequency, E_lower, T=300.):
    """ Function for converting intensity (in nm^2 MHz) to the
        transition dipole moment S_ij \mu^2
        Takes as input the simulated intensity and partition
        function at a particular temperature, usually 300 K,
        as well as the lower state energy and the transition frequency.
    """
    E_upper = calc_E_upper(frequency, E_lower)
    # top part of the equation
    A = 10.**I * Q
    lower_factor = boltzmann_factor(E_lower, T)       # Boltzmann factors
    upper_factor = boltzmann_factor(E_upper, T)
    # Calculate the lower part of the equation
    # The prefactor included here is taken from Brian
    # Drouin's notes
    B = (4.16231e-5 * frequency * (lower_factor - upper_factor))
    return A / B


def calc_E_upper(frequency, E_lower):
    # Calculate the upper state energy in wavenumbers.
    # Frequency is supplied in units of MHz, and E_lower in wavenumbers
    transition_freq = MHz2cm(frequency)
    return transition_freq + E_lower


def boltzmann_factor(E, T):
    # Calculate the Boltzmann factor for a particular energy and temperature
    # Boltzmann's constant in units of wavenumber Kelvin
    return np.exp(-E / (kbcm * T))


def approx_Q_linear(B, T):
    # Approximate expression for the rotational partition function
    # for a linear molecule
    return 2.0837e4 * (T / B)


def approx_Q_top(A, B, T, sigma=1, C=None):
    # Approximate expression for rotational partition function
    # of an (a)symmetric top from Gordy&Cook, p.g.57, eq 3.68
    # Symmetric and asymmetric tops differ by B and C being unique
    # or not
    if C is None:
        # For a symmetric top, B = C
        C = B
    return (5.34e6 / sigma) * (T**3. / (A * B * C))**0.5


def einsteinA(S, frequency):
    # Prefactor is given in the PGopher Intensity formulae
    # http://pgopher.chm.bris.ac.uk/Help/intensityformulae.htm
    # Units of the prefactor are s^-1 MHz^-3 D^-2
    # Units of Einstein A coefficient should be in s^-1
    prefactor = 1.163965505e-20
    return prefactor * frequency**3. * S


def calc_einstein(str_filepath):
    """ High-level function for calculating Einstein A
        coefficients for a given .str file output from
        SPCAT.
    """
    str_df = parse_str(str_filepath)
    # Calculate the transition moment dipole from the
    # square of the str output
    str_df["TDM"] = str_df["RTDM"]**2.
    # Calculate the Einstein A coefficients in units
    # of per second
    str_df["Einstein A"] = einsteinA(
        str_df["TDM"],
        str_df["Frequency"]
        )
    return str_df
